pipeline { 
    parameters {
    // string defaultValue: '*/develop', description: 'branch to build', name: 'BRANCH_TO_BUILD', trim: false
    // string defaultValue: 'api', description: 'service name', name: 'SERVICE_NAME', trim: false
    // string defaultValue: 'rental-app-staging', description: 'project id', name: 'PROJECT_ID', trim: false
    booleanParam defaultValue: false, description: 'Test?', name: 'WILL_TEST'
    booleanParam defaultValue: true, description: 'Deploy?', name: 'WILL_DEPLOY'
    }
    
    environment {
        DOMAIN='staging.theout.com'
        CONFIG_NAME = "dev"
        FLASK_ENV = "development"
        DATABASE_URI = "postgresql://admin:admin@172.16.7.101/shorten_url"
        SECRET_KEY = "abcd1234"
    }
    agent any
    options {
        skipStagesAfterUnstable()
        skipDefaultCheckout(true)
    }
    stages {
        stage('Build') {
            steps {
                script {
                    def myRepo = checkout scm
                    echo "myRepo: ${myRepo}"
                    def gitCommit = myRepo.GIT_COMMIT
                    echo "my commit: ${gitCommit}"
                    GIT_BRANCH = myRepo.GIT_BRANCH
                    echo "my branch: ${GIT_BRANCH}"
                    def shortGitCommit = "v-${gitCommit[0..6]}"
                    echo "my shortcommit: ${shortGitCommit}"
                    DEPLOY_VERSION = "${shortGitCommit}-${BUILD_NUMBER}"
                    echo "my deploy version: ${DEPLOY_VERSION}"

                    writeFile file: 'hello', text: 'this is the fucking file content'
                    sh """
                        virtualenv env
                        . env/bin/activate
                        pip install -r requirements.txt
                    """
                    echo "folder: $pwd"
                }
            }
        }
        stage('Test'){
            steps {
                script{
                    if(params.WILL_TEST == true){
                        echo "===========Testing============"
                        sh """
                            env/bin/coverage run --include=main.py -m pytest test.py
                            env/bin/coverage report
                        """
                    }
                    else{
                        echo "===========Skip Testing============"
                    }
                }
            }
        }
        stage('Deploy') {
            steps {
                script{
                    if(params.WILL_DEPLOY == true){
                        echo "===========Deploying============"
                    }
                    else{
                        echo "===========Skip Deploying============"
                    }
                }
            }
        }
    }
}